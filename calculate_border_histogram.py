from typing import Dict, Tuple
import numpy as np
import numpy.typing as npt

def pack(rgba: npt.NDArray[np.uint8]) -> int:
    """
    Pack RGBA values into a single 32-bit integer.
    
    Args:
        rgba: An array of 4 uint8 values representing RGBA.
    
    Returns:
        A 32-bit integer with packed RGBA values.
    """
    return int(rgba[0]) | (int(rgba[1]) << 8) | (int(rgba[2]) << 16) | (int(rgba[3]) << 24)

def add_to_histogram(histogram: Dict[int, int], rgba: npt.NDArray[np.uint8]) -> None:
    """
    Add an RGBA color to the histogram.
    
    Args:
        histogram: The histogram to update.
        rgba: An array of 4 uint8 values representing RGBA.
    """
    key = pack(rgba)
    histogram[key] = histogram.get(key, 0) + 1

def calculate_border_histogram(image: npt.NDArray[np.uint8]) -> Dict[int, int]:
    """
    Calculate a histogram of colors along the border of the image.
    
    Args:
        image: A 3D numpy array of shape (height, width, 4) representing 
               the image, where the last dimension is RGBA.
    
    Returns:
        A histogram where keys are packed RGBA values and values are counts.
    """
    if image.ndim != 3 or image.shape[2] != 4:
        raise ValueError("Image must be a 3D array with shape (height, width, 4)")
    
    histogram: Dict[int, int] = {}
    height, width = image.shape[:2]
    
    # Top/Bottom sides
    for x in range(width):
        add_to_histogram(histogram, image[0, x])
        add_to_histogram(histogram, image[-1, x])
    
    # Left/Right sides
    for y in range(height):
        add_to_histogram(histogram, image[y, 0])
        add_to_histogram(histogram, image[y, -1])
    
    return histogram


if __name__ == "__main__":
    output = {
        (0, 0, 0, 255): 15,
        (0, 0, 0, 0): 49
    }

    # Example usage:
    # Assuming 'input' is the numpy array representation of the image
    input_image: npt.NDArray[np.uint8] = np.array([
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 28, 62, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    ], dtype=np.uint8)

    # Ensure the input has the correct shape (height, width, 4)
    if input_image.ndim != 3 or input_image.shape[2] != 4:
        raise ValueError("Input image must have shape (height, width, 4)")

    histogram: Dict[int, int] = calculate_border_histogram(input_image)

    # Print the histogram
    print("Histogram:")
    for key, count in histogram.items():
        r = (key >> 0) & 0xFF
        g = (key >> 8) & 0xFF
        b = (key >> 16) & 0xFF
        a = (key >> 24) & 0xFF
        print(f"({r}, {g}, {b}, {a}): {count}")