import numpy as np
from calculate_border_histogram import calculate_border_histogram, pack

def find_background_color(image):
    histogram = calculate_border_histogram(image)
    
    # Left and right sides
    for y in range(image.shape[0]):
        left_color = pack(image[y, 0])
        right_color = pack(image[y, -1])
        histogram[left_color] += 1
        histogram[right_color] += 1
    
    bg_rgba, max_count = max(histogram.items(), key=lambda x: x[1])
    
    assert max_count > 0
    return bg_rgba

if __name__ == '__main__':
    # Example usage:
    # Assuming 'input' is a numpy array representing the image
    # with shape (height, width, channels)

    input = np.array([
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 28, 62, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 0]],
        [[0, 0, 0, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [87, 164, 255, 255], [0, 0, 0, 255], [0, 71, 155, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [255, 222, 70, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 71, 155, 255], [0, 71, 155, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 255], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255]],
        [[0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [87, 86, 92, 255], [87, 86, 92, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 255], [0, 0, 0, 255], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    ], dtype=np.uint8)


    output = find_background_color(input)
    print(f"Background color (RGBA packed): {output}")

